{"version":3,"sources":["logo.svg","components/home/MapViewComponent.js","components/home/Search.js","components/home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","options","url","styles","container","height","width","mapDiv","padding","margin","MapViewComponent","props","state","status","loadModules","then","Map","MapView","map","basemap","view","zoom","center","setState","this","style","id","renderMap","React","Component","Search","class","type","placeholder","Home","isVisible","myfunction","e","console","log","target","className","dockStyle","minWidth","maxWidth","backgroundColor","fluid","onVisibleChange","onClick","dockSizeMaxMin","bind","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,8KCIrCC,EAAU,CACdC,IAAK,8BAGDC,EAAU,CACdC,UAAW,CACTC,OAAQ,QACRC,MAAO,SAETC,OAAQ,CACNC,QAAS,EACTC,OAAQ,EACRJ,OAAQ,OACRC,MAAO,SAIUI,E,YAGnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,OAAQ,WAHO,E,iFAOE,IAAD,OAClBC,sBAAY,CAAC,WAAY,sBAAuBb,GAC7Cc,MAAK,YAAqB,IAAD,mBAAlBC,EAAkB,KAAbC,EAAa,KAClBC,EAAM,IAAIF,EAAI,CAAEG,QAAS,YACzBC,EAAO,IAAIH,EAAQ,CACvBb,UAAW,UACXc,MACAG,KAAM,EACNC,OAAQ,CAAC,QAAQ,UAEnBF,EAAKL,MAAK,WACR,EAAKQ,SAAS,CACZL,MACAE,OACAP,OAAQ,mB,kCAQhB,GAAyB,YAAtBW,KAAKZ,MAAMC,OACZ,OAAO,0C,+BAMT,OACM,yBAAKY,MAAOtB,EAAOC,WACjB,yBAAKsB,GAAG,UAAUD,MAAQtB,EAAOI,QAC9BiB,KAAKG,kB,GA1C0BC,IAAMC,WCjB/BC,G,6LAIb,OACI,6BAASJ,GAAG,SAASK,MAAM,qEAC3B,yBAAKA,MAAM,aACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,WACT,yBAAKA,MAAM,eACX,uBAAIA,MAAM,6BAAV,QAA2C,2BAAOC,KAAK,OAAOD,MAAM,kBAAkBE,YAAY,0B,GAVhFJ,c,gBCCfK,E,2MAEjBtB,MAAM,CACFuB,WAAY,EACZ7B,MAAQ,Q,EAcb8B,WAAW,SAACC,GACRC,QAAQC,IAAIF,I,8EAZAA,GAEfb,KAAKD,SAAS,CACTY,WAAW,EACX7B,MAAQ,UAGRgC,QAAQC,IAAIF,EAAEG,U,+BAkBf,OACI,yBAAKC,UAAU,aACP,kBAAC,IAAD,CAAOC,UAVD,CACdC,SAAU,OACVC,SAAU,QACVtC,MAAO,QACPD,OAAQ,OACRwC,gBAAiB,SAKoBC,OAAO,EAAMC,gBAAmBvB,KAAKY,WAAYD,UAAWX,KAAKZ,MAAMuB,WAChG,kBAAC,EAAD,MACA,yBAAKa,QAASxB,KAAKyB,eAAeC,KAAK1B,OAAvC,OAER,kBAAC,EAAD,W,GAtCkBK,aCQnBsB,MARf,WACE,OACE,yBAAKV,UAAU,OACX,kBAAC,EAAD,QCIYW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,MAAK,SAAAiD,GACjCA,EAAaC,kB","file":"static/js/main.42f40395.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react'\r\nimport { Map } from '@esri/react-arcgis';\r\nimport { loadModules } from 'esri-loader';\r\n\r\nconst options = {\r\n  url: 'https://js.arcgis.com/4.6/'\r\n};\r\n\r\nconst styles =  {\r\n  container: {\r\n    height: '100vh',\r\n    width: '100vw'\r\n  },\r\n  mapDiv: {\r\n    padding: 0,\r\n    margin: 0,\r\n    height: '100%',\r\n    width: '100%'\r\n  },\r\n}\r\n\r\nexport default class MapViewComponent extends React.Component {\r\n    \r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      status: 'loading'\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    loadModules(['esri/Map', 'esri/views/MapView'], options)\r\n      .then(([Map, MapView]) => {\r\n        const map = new Map({ basemap: \"streets\" });\r\n        const view = new MapView({\r\n          container: \"viewDiv\",\r\n          map,\r\n          zoom: 5,\r\n          center: [79.8612,6.9271],\r\n        });\r\n        view.then(() => {\r\n          this.setState({\r\n            map,\r\n            view,\r\n            status: 'loaded'\r\n          });\r\n        });\r\n      })\r\n\r\n  }\r\n\r\n  renderMap() {\r\n    if(this.state.status === 'loading') {\r\n      return <div>loading</div>;\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return(\r\n          <div style={styles.container}>\r\n            <div id='viewDiv' style={ styles.mapDiv } >\r\n              {this.renderMap()}\r\n            </div>\r\n          </div>\r\n    )\r\n  }\r\n  }","import React, { Component } from 'react'\r\nimport M from 'materialize-css'\r\nimport 'materialize-css/dist/css/materialize.min.css'\r\n\r\nexport default class Search extends Component {\r\n\r\n  \r\n    render() {\r\n        return (\r\n            <section id=\"search\" class=\"section section-search white darken-1 white-text center scrollspy\">\r\n            <div class=\"container\">\r\n              <div class=\"row\">\r\n                <div class=\"col s12\">\r\n                  <div class=\"input-field\">\r\n                  <i  class=\"material-icons black-text\">menu <input type=\"text\" class=\"white grey-text\" placeholder=\"Search Here\"/></i>\r\n                  \r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </section>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport MapViewComponent from './MapViewComponent'\r\nimport Search from './Search'\r\nimport Dock  from 'react-dock'\r\n\r\nexport default class Home extends Component {\r\n\r\n    state={\r\n        isVisible : true,\r\n        width : \"100%\"\r\n    }\r\n\r\n    dockSizeMaxMin(e){\r\n\r\n    this.setState({\r\n         isVisible: true,\r\n         width : \"30rem\"\r\n         })\r\n         \r\n         console.log(e.target) \r\n      \r\n   }\r\n\r\n   myfunction=(e) =>{\r\n       console.log(e)\r\n   }\r\n\r\n    render() {\r\n\r\n          let dockStyle = {\r\n            minWidth: \"1rem\",\r\n            maxWidth: \"30rem\",\r\n            width: \"400px\",\r\n            height: \"100%\",\r\n            backgroundColor: \"white\",\r\n          }\r\n       \r\n        return (\r\n            <div className=\"container\">\r\n                    <Dock  dockStyle={dockStyle} fluid={true} onVisibleChange = {this.myfunction} isVisible={this.state.isVisible}>\r\n                        <Search/>\r\n                        <div onClick={this.dockSizeMaxMin.bind(this)}>  </div>\r\n                     </Dock>\r\n                <MapViewComponent/>\r\n            </div>\r\n           \r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/home/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}